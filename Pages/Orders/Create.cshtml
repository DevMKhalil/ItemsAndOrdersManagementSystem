@page
@model ItemsAndOrdersManagementSystem.Pages.Orders.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Order</h4>
<hr />
<div class="row">
    <div class="col-md-4" id="itemDetailsContainer">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Order.UserId" class="control-label"></label>
                <select asp-for="Order.UserId" class ="form-control" asp-items="ViewBag.UserId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
    <div class="col-md-8" id="itemDetailsContainer">

    </div>
    <button id="addItemDetailButton">Add Item Detail</button>
</div>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // JavaScript logic to add new rows
        document.getElementById('addItemDetailButton').addEventListener('click', function () {
            addNewItemDetailRow();
        });

        function addNewItemDetailRow() {
            var container = document.getElementById('itemDetailsContainer');
            var childLength = container.childNodes.length;
            var newRow = document.createElement('div');
            newRow.innerHTML = getNewItemDetailRowHtml(childLength); // You need a function to generate HTML for a new row
            container.appendChild(newRow);
        }

        function getNewItemDetailRowHtml(index) {
            // Define the HTML structure for a new row
            // Customize this based on your item detail form fields
            return `
                    <div class="item-detail-row">
                                <input type="text" name="newItemDetails[${index}].PropertyName" placeholder="Property Name" />
                        <!-- Add more input fields as needed -->
                    </div>
                `;
        }
    </script>
}
